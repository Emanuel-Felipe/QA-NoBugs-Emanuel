{
	"info": {
		"_postman_id": "7c51b97c-f5a8-478b-9844-f38147eb5d2d",
		"name": "Collectioon PETSTORE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47966602",
		"_collection_link": "https://kauaraff-9874555.postman.co/workspace/PetStore-API~db2cf8fd-86e4-4618-94b3-55a50f18c122/collection/47544987-7c51b97c-f5a8-478b-9844-f38147eb5d2d?action=share&source=collection_link&creator=47966602"
	},
	"item": [
		{
			"name": "user - Kauã Raffaello",
			"item": [
				{
					"name": "/user/login - usado para verificar quem está logado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//to see if that one is a GET or other else\r",
									"pm.test(\"There is a GET one, code 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//to see that return is JSON and not XML, for example\r",
									"pm.test(\"The return is of type JSON\", function(){\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore3.swagger.io/api/v3/user/login",
							"protocol": "https",
							"host": [
								"petstore3",
								"swagger",
								"io"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							],
							"query": [
								{
									"key": "special-key",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/logout - usado para deslogar",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore3.swagger.io/api/v3/user/logout",
							"protocol": "https",
							"host": [
								"petstore3",
								"swagger",
								"io"
							],
							"path": [
								"api",
								"v3",
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user - cria um usuário novo",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"username\": \"kaua\",\r\n  \"firstName\": \"Raffaello\",\r\n  \"lastName\": \"James\",\r\n  \"email\": \"kaua@email.com\",\r\n  \"password\": \"123456789\",\r\n  \"phone\": \"12345\",\r\n  \"userStatus\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/user",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"user"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/createWithList - cria com um array de usuarios vários usuários de uma vez",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{id}},\r\n  \"username\": \"{{username}}\",\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"userStatus\": {{userStatus}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/user/createWithList",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/{username} - altera um usuário criado",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 10,\r\n  \"username\": \"theUser\",\r\n  \"firstName\": \"kaaaahn\",\r\n  \"lastName\": \"James\",\r\n  \"email\": \"john@email.com\",\r\n  \"password\": \"12345\",\r\n  \"phone\": \"12345\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore3.swagger.io/api/v2/user/theUser",
							"protocol": "https",
							"host": [
								"petstore3",
								"swagger",
								"io"
							],
							"path": [
								"api",
								"v2",
								"user",
								"theUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/{username} - deleta um usuário criado",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v3/theUser",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v3",
								"theUser"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pet - Izadora e Emanuel",
			"item": [
				{
					"name": "/pet/update - Usado para atualizar as informações de um pet novo",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 10,\r\n  \"name\": \"DOggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore3.swagger.io/api/v3/pet",
							"protocol": "https",
							"host": [
								"petstore3",
								"swagger",
								"io"
							],
							"path": [
								"api",
								"v3",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pet/insert - Usado para inserir as informações de um pet novo",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 17,\r\n  \"name\": \"Spike\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore3.swagger.io/api/v3/pet",
							"protocol": "https",
							"host": [
								"petstore3",
								"swagger",
								"io"
							],
							"path": [
								"api",
								"v3",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pet/findStats - Usado para encontrar as informações de todos os pet de acordo com os status",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet/findByStatus?status=available",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/pet/findTags - Usado para encontrar as informações de todos os pet de acordo com a tag",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore3.swagger.io/api/v3/pet/findByTags?tags=string",
							"protocol": "https",
							"host": [
								"petstore3",
								"swagger",
								"io"
							],
							"path": [
								"api",
								"v3",
								"pet",
								"findByTags"
							],
							"query": [
								{
									"key": "tags",
									"value": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pet/{petid} - Usado para encontrar um animal de estimação pelo ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 10,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}"
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet/10",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "pet/{petid} - Atualiza um animal de estimação",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet/10",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "pet/{petid} - Deleta um animal de estimação",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet/10",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "pet/{petid}/uploadImage",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://petstore3.swagger.io/api/v3/pet/10/uploadImage",
							"protocol": "https",
							"host": [
								"petstore3",
								"swagger",
								"io"
							],
							"path": [
								"api",
								"v3",
								"pet",
								"10",
								"uploadImage"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Store - Raphael",
			"item": [
				{
					"name": "/store/order/{orderId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta é JSON válido\", () => {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Pedido retornado tem o mesmo id requisitado\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json.id).to.eql(parseInt(pm.variables.get(\"id\")));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/store/order/10",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"order",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta é JSON válido\", () => {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Inventário contém chaves de status\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.any.keys(\"available\", \"pending\", \"sold\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/store/inventory",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200 ou 201\", function () {\r",
									"    pm.response.to.have.status.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta é JSON válido\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta contém os campos esperados\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    // Garantir que é um array\r",
									"    pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
									"\r",
									"    // Testar o primeiro item como exemplo\r",
									"    const firstItem = jsonData[0];\r",
									"    pm.expect(firstItem).to.have.property(\"id\", 10);\r",
									"    pm.expect(firstItem).to.have.property(\"petId\", 198772);\r",
									"    pm.expect(firstItem).to.have.property(\"quantity\", 7);\r",
									"    pm.expect(firstItem).to.have.property(\"status\", \"approved\");\r",
									"    pm.expect(firstItem).to.have.property(\"complete\", true);\r",
									"\r",
									"    // Testar se todos os itens têm os campos obrigatórios\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"petId\");\r",
									"        pm.expect(item).to.have.property(\"quantity\");\r",
									"        pm.expect(item).to.have.property(\"status\");\r",
									"        pm.expect(item).to.have.property(\"complete\");\r",
									"        pm.expect(item).to.have.property(\"shipDate\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"id\": 10,\r\n\"petId\": 198772,\r\n\"quantity\": 7,\r\n\"shipDate\": \"2025-08-28T16:34:32.979Z\",\r\n\"status\": \"approved\",\r\n\"complete\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/store/order",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/order/{orderId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200 ou 204\", function () {\r",
									"    pm.response.to.have.status.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta é JSON válido ou vazio\", function () {\r",
									"    // Se houver corpo, garante que é JSON\r",
									"    if (pm.response.text()) {\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Ordem deletada corretamente\", function () {\r",
									"    // Se o corpo retornar algo, pode testar\r",
									"    const jsonData = pm.response.text();\r",
									"    if (jsonData) {\r",
									"        const data = pm.response.json();\r",
									"        pm.expect(data).to.be.empty; // No Petstore, a deleção retorna {}\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/store/order/10",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"order",
								"10"
							]
						}
					},
					"response": []
				}
			],
			"description": "Essa pasta contém os endpoints responsáveis pelo gerenciamento de pedidos da loja.\n\nAqui você pode:\n\n- Criar um novo pedido (`POST /store/order`)\n    \n- Consultar um pedido específico (`GET /store/order/{orderId}`)\n    \n- Excluir um pedido (`DELETE /store/order/{orderId}`)\n    \n\nCada requisição já vem com exemplos de body e testes automatizados no Postman para validar o funcionamento da API (status code, formato da resposta e campos obrigatórios).\n\n---\n\n# 📂 **Order**\n\n### 🔹 `POST /store/order`\n\n**Descrição:** Cria um novo pedido na loja.  \n**Body esperado:**\n\n``` json\n{\n  \"id\": 10,\n  \"petId\": 198772,\n  \"quantity\": 7,\n  \"shipDate\": \"2025-08-28T16:34:32.979Z\",\n  \"status\": \"approved\",\n  \"complete\": true\n}\n\n ```\n\n**Testes no Postman:**\n\n``` javascript\npm.test(\"Status code é 200 ou 201\", () => {\n    pm.response.to.have.status.oneOf([200, 201]);\n});\npm.test(\"Resposta é JSON válido\", () => {\n    pm.response.to.be.json;\n});\npm.test(\"Campos obrigatórios estão presentes\", () => {\n    const json = pm.response.json();\n    pm.expect(json).to.have.property(\"id\");\n    pm.expect(json).to.have.property(\"petId\");\n    pm.expect(json).to.have.property(\"quantity\");\n    pm.expect(json).to.have.property(\"status\");\n    pm.expect(json).to.have.property(\"complete\");\n});\n\n ```\n\n---\n\n### 🔹 `GET /store/order/{orderId}`\n\n**Descrição:** Busca os detalhes de um pedido específico pelo `orderId`.\n\n**Testes no Postman:**\n\n``` typescript\npm.test(\"Status code é 200\", () => {\n    pm.response.to.have.status(200);\n});\npm.test(\"Resposta é JSON válido\", () => {\n    pm.response.to.be.json;\n});\npm.test(\"Pedido retornado tem o mesmo orderId requisitado\", () => {\n    const json = pm.response.json();\n    pm.expect(json.id).to.eql(parseInt(pm.variables.get(\"orderId\")));\n});\n\n ```\n\n---\n\n### 🔹 `DELETE /store/order/{orderId}`\n\n**Descrição:** Exclui um pedido pelo `orderId`.\n\n**Testes no Postman:**\n\n``` javascript\npm.test(\"Status code é 200 ou 204\", () => {\n    pm.response.to.have.status.oneOf([200, 204]);\n});\npm.test(\"Resposta confirma exclusão\", () => {\n    pm.expect(pm.response.text()).to.include(\"deleted\").or.to.be.empty;\n});\n\n ```\n\n---\n\n# **Inventory**\n\n### 🔹 `GET /store/inventory`\n\n**Descrição:** Retorna o inventário da loja, mostrando quantidades por status (`available`, `pending`, `sold`).\n\n**Testes no Postman:**\n\n``` javascript\npm.test(\"Status code é 200\", () => {\n    pm.response.to.have.status(200);\n});\npm.test(\"Resposta é JSON válido\", () => {\n    pm.response.to.be.json;\n});\npm.test(\"Inventário contém chaves de status\", () => {\n    const json = pm.response.json();\n    pm.expect(json).to.have.any.keys(\"available\", \"pending\", \"sold\");\n});\n\n ```",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://petstore3.swagger.io/api/v3"
		}
	]
}